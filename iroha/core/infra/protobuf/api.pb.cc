// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Api {

namespace {

const ::google::protobuf::Descriptor* TransactionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Query_ValueEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BaseObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseObject_reflection_ = NULL;
struct BaseObjectOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr valuestring_;
  ::google::protobuf::int64 valueint_;
  bool valueboolean_;
  double valuedouble_;
}* BaseObject_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* SimpleAsset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleAsset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Asset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Asset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Asset_ValueEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Domain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Domain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trust_reflection_ = NULL;
const ::google::protobuf::Descriptor* Peer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Peer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxSignatures_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxSignatures_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventSignature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventSignature_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsensusEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsensusEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_api_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_api_2eproto() {
  protobuf_AddDesc_api_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "api.proto");
  GOOGLE_CHECK(file != NULL);
  TransactionResponse_descriptor_ = file->message_type(0);
  static const int TransactionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionResponse, transaction_),
  };
  TransactionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionResponse_descriptor_,
      TransactionResponse::default_instance_,
      TransactionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransactionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionResponse, _is_default_instance_));
  AssetResponse_descriptor_ = file->message_type(1);
  static const int AssetResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetResponse, asset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetResponse, simpleasset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetResponse, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetResponse, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetResponse, peer_),
  };
  AssetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AssetResponse_descriptor_,
      AssetResponse::default_instance_,
      AssetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AssetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssetResponse, _is_default_instance_));
  StatusResponse_descriptor_ = file->message_type(2);
  static const int StatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, timestamp_),
  };
  StatusResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusResponse_descriptor_,
      StatusResponse::default_instance_,
      StatusResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _is_default_instance_));
  Query_descriptor_ = file->message_type(3);
  static const int Query_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, value_),
  };
  Query_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Query_descriptor_,
      Query::default_instance_,
      Query_offsets_,
      -1,
      -1,
      -1,
      sizeof(Query),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _is_default_instance_));
  Query_ValueEntry_descriptor_ = Query_descriptor_->nested_type(0);
  BaseObject_descriptor_ = file->message_type(4);
  static const int BaseObject_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BaseObject_default_oneof_instance_, valuestring_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BaseObject_default_oneof_instance_, valueint_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BaseObject_default_oneof_instance_, valueboolean_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(BaseObject_default_oneof_instance_, valuedouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseObject, value_),
  };
  BaseObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaseObject_descriptor_,
      BaseObject::default_instance_,
      BaseObject_offsets_,
      -1,
      -1,
      -1,
      BaseObject_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseObject, _oneof_case_[0]),
      sizeof(BaseObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseObject, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseObject, _is_default_instance_));
  SimpleAsset_descriptor_ = file->message_type(5);
  static const int SimpleAsset_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAsset, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAsset, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAsset, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAsset, smartcontractname_),
  };
  SimpleAsset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimpleAsset_descriptor_,
      SimpleAsset::default_instance_,
      SimpleAsset_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimpleAsset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAsset, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleAsset, _is_default_instance_));
  Asset_descriptor_ = file->message_type(6);
  static const int Asset_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, smartcontractname_),
  };
  Asset_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Asset_descriptor_,
      Asset::default_instance_,
      Asset_offsets_,
      -1,
      -1,
      -1,
      sizeof(Asset),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Asset, _is_default_instance_));
  Asset_ValueEntry_descriptor_ = Asset_descriptor_->nested_type(0);
  Domain_descriptor_ = file->message_type(7);
  static const int Domain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, ownerpublickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, name_),
  };
  Domain_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Domain_descriptor_,
      Domain::default_instance_,
      Domain_offsets_,
      -1,
      -1,
      -1,
      sizeof(Domain),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, _is_default_instance_));
  Account_descriptor_ = file->message_type(8);
  static const int Account_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, publickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, assets_),
  };
  Account_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Account_descriptor_,
      Account::default_instance_,
      Account_offsets_,
      -1,
      -1,
      -1,
      sizeof(Account),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _is_default_instance_));
  Trust_descriptor_ = file->message_type(9);
  static const int Trust_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trust, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trust, isok_),
  };
  Trust_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Trust_descriptor_,
      Trust::default_instance_,
      Trust_offsets_,
      -1,
      -1,
      -1,
      sizeof(Trust),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trust, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trust, _is_default_instance_));
  Peer_descriptor_ = file->message_type(10);
  static const int Peer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, publickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, trust_),
  };
  Peer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Peer_descriptor_,
      Peer::default_instance_,
      Peer_offsets_,
      -1,
      -1,
      -1,
      sizeof(Peer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _is_default_instance_));
  TxSignatures_descriptor_ = file->message_type(11);
  static const int TxSignatures_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignatures, publickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignatures, signature_),
  };
  TxSignatures_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TxSignatures_descriptor_,
      TxSignatures::default_instance_,
      TxSignatures_offsets_,
      -1,
      -1,
      -1,
      sizeof(TxSignatures),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignatures, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxSignatures, _is_default_instance_));
  EventSignature_descriptor_ = file->message_type(12);
  static const int EventSignature_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSignature, publickey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSignature, signature_),
  };
  EventSignature_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EventSignature_descriptor_,
      EventSignature::default_instance_,
      EventSignature_offsets_,
      -1,
      -1,
      -1,
      sizeof(EventSignature),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSignature, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSignature, _is_default_instance_));
  Transaction_descriptor_ = file->message_type(13);
  static const int Transaction_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, txsignatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, senderpubkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, asset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, simpleasset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, receivepubkey_),
  };
  Transaction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transaction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _is_default_instance_));
  ConsensusEvent_descriptor_ = file->message_type(14);
  static const int ConsensusEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusEvent, eventsignatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusEvent, transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusEvent, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusEvent, status_),
  };
  ConsensusEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConsensusEvent_descriptor_,
      ConsensusEvent::default_instance_,
      ConsensusEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConsensusEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsensusEvent, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_api_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionResponse_descriptor_, &TransactionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AssetResponse_descriptor_, &AssetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusResponse_descriptor_, &StatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Query_descriptor_, &Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Query_ValueEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::Api::BaseObject,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Query_ValueEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaseObject_descriptor_, &BaseObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimpleAsset_descriptor_, &SimpleAsset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Asset_descriptor_, &Asset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        Asset_ValueEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::Api::BaseObject,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                Asset_ValueEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Domain_descriptor_, &Domain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Account_descriptor_, &Account::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Trust_descriptor_, &Trust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Peer_descriptor_, &Peer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TxSignatures_descriptor_, &TxSignatures::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EventSignature_descriptor_, &EventSignature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConsensusEvent_descriptor_, &ConsensusEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_api_2eproto() {
  delete TransactionResponse::default_instance_;
  delete TransactionResponse_reflection_;
  delete AssetResponse::default_instance_;
  delete AssetResponse_reflection_;
  delete StatusResponse::default_instance_;
  delete StatusResponse_reflection_;
  delete Query::default_instance_;
  delete Query_reflection_;
  delete BaseObject::default_instance_;
  delete BaseObject_default_oneof_instance_;
  delete BaseObject_reflection_;
  delete SimpleAsset::default_instance_;
  delete SimpleAsset_reflection_;
  delete Asset::default_instance_;
  delete Asset_reflection_;
  delete Domain::default_instance_;
  delete Domain_reflection_;
  delete Account::default_instance_;
  delete Account_reflection_;
  delete Trust::default_instance_;
  delete Trust_reflection_;
  delete Peer::default_instance_;
  delete Peer_reflection_;
  delete TxSignatures::default_instance_;
  delete TxSignatures_reflection_;
  delete EventSignature::default_instance_;
  delete EventSignature_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete ConsensusEvent::default_instance_;
  delete ConsensusEvent_reflection_;
}

void protobuf_AddDesc_api_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_api_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tapi.proto\022\003Api\"[\n\023TransactionResponse\022"
    "\017\n\007message\030\001 \001(\t\022\014\n\004code\030\002 \001(\004\022%\n\013transa"
    "ction\030\003 \003(\0132\020.Api.Transaction\"\330\001\n\rAssetR"
    "esponse\022\017\n\007message\030\001 \001(\t\022\014\n\004code\030\002 \001(\004\022\021"
    "\n\ttimestamp\030\003 \001(\004\022\031\n\005asset\030\004 \001(\0132\n.Api.A"
    "sset\022%\n\013simpleAsset\030\005 \001(\0132\020.Api.SimpleAs"
    "set\022\033\n\006domain\030\006 \001(\0132\013.Api.Domain\022\035\n\007acco"
    "unt\030\007 \001(\0132\014.Api.Account\022\027\n\004peer\030\010 \001(\0132\t."
    "Api.Peer\"C\n\016StatusResponse\022\r\n\005value\030\001 \001("
    "\t\022\017\n\007message\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\004\"z\n"
    "\005Query\022\014\n\004type\030\001 \001(\t\022$\n\005value\030\002 \003(\0132\025.Ap"
    "i.Query.ValueEntry\032=\n\nValueEntry\022\013\n\003key\030"
    "\001 \001(\t\022\036\n\005value\030\002 \001(\0132\017.Api.BaseObject:\0028"
    "\001\"o\n\nBaseObject\022\025\n\013valueString\030\001 \001(\tH\000\022\022"
    "\n\010valueInt\030\002 \001(\003H\000\022\026\n\014valueBoolean\030\003 \001(\010"
    "H\000\022\025\n\013valueDouble\030\004 \001(\001H\000B\007\n\005value\"f\n\013Si"
    "mpleAsset\022\016\n\006domain\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022"
    "\036\n\005value\030\003 \001(\0132\017.Api.BaseObject\022\031\n\021smart"
    "ContractName\030\004 \001(\t\"\245\001\n\005Asset\022\016\n\006domain\030\001"
    " \001(\t\022\014\n\004name\030\002 \001(\t\022$\n\005value\030\003 \003(\0132\025.Api."
    "Asset.ValueEntry\022\031\n\021smartContractName\030\004 "
    "\001(\t\032=\n\nValueEntry\022\013\n\003key\030\001 \001(\t\022\036\n\005value\030"
    "\002 \001(\0132\017.Api.BaseObject:\0028\001\".\n\006Domain\022\026\n\016"
    "ownerPublicKey\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\":\n\007Ac"
    "count\022\021\n\tpublicKey\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016"
    "\n\006assets\030\003 \003(\t\"$\n\005Trust\022\r\n\005value\030\001 \001(\001\022\014"
    "\n\004isOk\030\002 \001(\010\"E\n\004Peer\022\021\n\tpublicKey\030\001 \001(\t\022"
    "\017\n\007address\030\002 \001(\t\022\031\n\005trust\030\003 \001(\0132\n.Api.Tr"
    "ust\"4\n\014TxSignatures\022\021\n\tpublicKey\030\001 \001(\t\022\021"
    "\n\tsignature\030\002 \001(\t\"6\n\016EventSignature\022\021\n\tp"
    "ublicKey\030\001 \001(\t\022\021\n\tsignature\030\002 \001(\t\"\251\002\n\013Tr"
    "ansaction\022\'\n\014txSignatures\030\001 \003(\0132\021.Api.Tx"
    "Signatures\022\014\n\004type\030\002 \001(\t\022\024\n\014senderPubkey"
    "\030\003 \001(\t\022\014\n\004hash\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\004\022"
    "\031\n\005asset\030\006 \001(\0132\n.Api.Asset\022%\n\013simpleAsse"
    "t\030\007 \001(\0132\020.Api.SimpleAsset\022\033\n\006domain\030\010 \001("
    "\0132\013.Api.Domain\022\035\n\007account\030\t \001(\0132\014.Api.Ac"
    "count\022\027\n\004peer\030\n \001(\0132\t.Api.Peer\022\025\n\rreceiv"
    "ePubkey\030\013 \001(\t\"\204\001\n\016ConsensusEvent\022,\n\017even"
    "tSignatures\030\001 \003(\0132\023.Api.EventSignature\022%"
    "\n\013transaction\030\002 \001(\0132\020.Api.Transaction\022\r\n"
    "\005order\030\003 \001(\004\022\016\n\006status\030\004 \001(\t2G\n\025Transact"
    "ionRepository\022.\n\004find\022\n.Api.Query\032\030.Api."
    "TransactionResponse\"\0002;\n\017AssetRepository"
    "\022(\n\004find\022\n.Api.Query\032\022.Api.AssetResponse"
    "\"\0002r\n\010Sumeragi\0220\n\005Torii\022\020.Api.Transactio"
    "n\032\023.Api.StatusResponse\"\000\0224\n\006Verify\022\023.Api"
    ".ConsensusEvent\032\023.Api.StatusResponse\"\000B\003"
    "\200\001\000b\006proto3", 1931);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "api.proto", &protobuf_RegisterTypes);
  TransactionResponse::default_instance_ = new TransactionResponse();
  AssetResponse::default_instance_ = new AssetResponse();
  StatusResponse::default_instance_ = new StatusResponse();
  Query::default_instance_ = new Query();
  BaseObject::default_instance_ = new BaseObject();
  BaseObject_default_oneof_instance_ = new BaseObjectOneofInstance();
  SimpleAsset::default_instance_ = new SimpleAsset();
  Asset::default_instance_ = new Asset();
  Domain::default_instance_ = new Domain();
  Account::default_instance_ = new Account();
  Trust::default_instance_ = new Trust();
  Peer::default_instance_ = new Peer();
  TxSignatures::default_instance_ = new TxSignatures();
  EventSignature::default_instance_ = new EventSignature();
  Transaction::default_instance_ = new Transaction();
  ConsensusEvent::default_instance_ = new ConsensusEvent();
  TransactionResponse::default_instance_->InitAsDefaultInstance();
  AssetResponse::default_instance_->InitAsDefaultInstance();
  StatusResponse::default_instance_->InitAsDefaultInstance();
  Query::default_instance_->InitAsDefaultInstance();
  BaseObject::default_instance_->InitAsDefaultInstance();
  SimpleAsset::default_instance_->InitAsDefaultInstance();
  Asset::default_instance_->InitAsDefaultInstance();
  Domain::default_instance_->InitAsDefaultInstance();
  Account::default_instance_->InitAsDefaultInstance();
  Trust::default_instance_->InitAsDefaultInstance();
  Peer::default_instance_->InitAsDefaultInstance();
  TxSignatures::default_instance_->InitAsDefaultInstance();
  EventSignature::default_instance_->InitAsDefaultInstance();
  Transaction::default_instance_->InitAsDefaultInstance();
  ConsensusEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_api_2eproto {
  StaticDescriptorInitializer_api_2eproto() {
    protobuf_AddDesc_api_2eproto();
  }
} static_descriptor_initializer_api_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionResponse::kMessageFieldNumber;
const int TransactionResponse::kCodeFieldNumber;
const int TransactionResponse::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionResponse::TransactionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.TransactionResponse)
}

void TransactionResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransactionResponse::TransactionResponse(const TransactionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.TransactionResponse)
}

void TransactionResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = GOOGLE_ULONGLONG(0);
}

TransactionResponse::~TransactionResponse() {
  // @@protoc_insertion_point(destructor:Api.TransactionResponse)
  SharedDtor();
}

void TransactionResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TransactionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionResponse_descriptor_;
}

const TransactionResponse& TransactionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

TransactionResponse* TransactionResponse::default_instance_ = NULL;

TransactionResponse* TransactionResponse::New(::google::protobuf::Arena* arena) const {
  TransactionResponse* n = new TransactionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.TransactionResponse)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = GOOGLE_ULONGLONG(0);
  transaction_.Clear();
}

bool TransactionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.TransactionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.TransactionResponse.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional uint64 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transaction;
        break;
      }

      // repeated .Api.Transaction transaction = 3;
      case 3: {
        if (tag == 26) {
         parse_transaction:
          DO_(input->IncrementRecursionDepth());
         parse_loop_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_transaction;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.TransactionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.TransactionResponse)
  return false;
#undef DO_
}

void TransactionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.TransactionResponse)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.TransactionResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional uint64 code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->code(), output);
  }

  // repeated .Api.Transaction transaction = 3;
  for (unsigned int i = 0, n = this->transaction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transaction(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.TransactionResponse)
}

::google::protobuf::uint8* TransactionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.TransactionResponse)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.TransactionResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional uint64 code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->code(), target);
  }

  // repeated .Api.Transaction transaction = 3;
  for (unsigned int i = 0, n = this->transaction_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->transaction(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.TransactionResponse)
  return target;
}

int TransactionResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.TransactionResponse)
  int total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional uint64 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->code());
  }

  // repeated .Api.Transaction transaction = 3;
  total_size += 1 * this->transaction_size();
  for (int i = 0; i < this->transaction_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transaction(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.TransactionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TransactionResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.TransactionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.TransactionResponse)
    MergeFrom(*source);
  }
}

void TransactionResponse::MergeFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.TransactionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  transaction_.MergeFrom(from.transaction_);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void TransactionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.TransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionResponse::CopyFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.TransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResponse::IsInitialized() const {

  return true;
}

void TransactionResponse::Swap(TransactionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionResponse::InternalSwap(TransactionResponse* other) {
  message_.Swap(&other->message_);
  std::swap(code_, other->code_);
  transaction_.UnsafeArenaSwap(&other->transaction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionResponse_descriptor_;
  metadata.reflection = TransactionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionResponse

// optional string message = 1;
void TransactionResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TransactionResponse::message() const {
  // @@protoc_insertion_point(field_get:Api.TransactionResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.TransactionResponse.message)
}
 void TransactionResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.TransactionResponse.message)
}
 void TransactionResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.TransactionResponse.message)
}
 ::std::string* TransactionResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Api.TransactionResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransactionResponse::release_message() {
  // @@protoc_insertion_point(field_release:Api.TransactionResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransactionResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Api.TransactionResponse.message)
}

// optional uint64 code = 2;
void TransactionResponse::clear_code() {
  code_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 TransactionResponse::code() const {
  // @@protoc_insertion_point(field_get:Api.TransactionResponse.code)
  return code_;
}
 void TransactionResponse::set_code(::google::protobuf::uint64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Api.TransactionResponse.code)
}

// repeated .Api.Transaction transaction = 3;
int TransactionResponse::transaction_size() const {
  return transaction_.size();
}
void TransactionResponse::clear_transaction() {
  transaction_.Clear();
}
const ::Api::Transaction& TransactionResponse::transaction(int index) const {
  // @@protoc_insertion_point(field_get:Api.TransactionResponse.transaction)
  return transaction_.Get(index);
}
::Api::Transaction* TransactionResponse::mutable_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:Api.TransactionResponse.transaction)
  return transaction_.Mutable(index);
}
::Api::Transaction* TransactionResponse::add_transaction() {
  // @@protoc_insertion_point(field_add:Api.TransactionResponse.transaction)
  return transaction_.Add();
}
::google::protobuf::RepeatedPtrField< ::Api::Transaction >*
TransactionResponse::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable_list:Api.TransactionResponse.transaction)
  return &transaction_;
}
const ::google::protobuf::RepeatedPtrField< ::Api::Transaction >&
TransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_list:Api.TransactionResponse.transaction)
  return transaction_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AssetResponse::kMessageFieldNumber;
const int AssetResponse::kCodeFieldNumber;
const int AssetResponse::kTimestampFieldNumber;
const int AssetResponse::kAssetFieldNumber;
const int AssetResponse::kSimpleAssetFieldNumber;
const int AssetResponse::kDomainFieldNumber;
const int AssetResponse::kAccountFieldNumber;
const int AssetResponse::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AssetResponse::AssetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.AssetResponse)
}

void AssetResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  asset_ = const_cast< ::Api::Asset*>(&::Api::Asset::default_instance());
  simpleasset_ = const_cast< ::Api::SimpleAsset*>(&::Api::SimpleAsset::default_instance());
  domain_ = const_cast< ::Api::Domain*>(&::Api::Domain::default_instance());
  account_ = const_cast< ::Api::Account*>(&::Api::Account::default_instance());
  peer_ = const_cast< ::Api::Peer*>(&::Api::Peer::default_instance());
}

AssetResponse::AssetResponse(const AssetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.AssetResponse)
}

void AssetResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = GOOGLE_ULONGLONG(0);
  timestamp_ = GOOGLE_ULONGLONG(0);
  asset_ = NULL;
  simpleasset_ = NULL;
  domain_ = NULL;
  account_ = NULL;
  peer_ = NULL;
}

AssetResponse::~AssetResponse() {
  // @@protoc_insertion_point(destructor:Api.AssetResponse)
  SharedDtor();
}

void AssetResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete asset_;
    delete simpleasset_;
    delete domain_;
    delete account_;
    delete peer_;
  }
}

void AssetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssetResponse_descriptor_;
}

const AssetResponse& AssetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

AssetResponse* AssetResponse::default_instance_ = NULL;

AssetResponse* AssetResponse::New(::google::protobuf::Arena* arena) const {
  AssetResponse* n = new AssetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AssetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.AssetResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AssetResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AssetResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(code_, timestamp_);
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && asset_ != NULL) delete asset_;
  asset_ = NULL;
  if (GetArenaNoVirtual() == NULL && simpleasset_ != NULL) delete simpleasset_;
  simpleasset_ = NULL;
  if (GetArenaNoVirtual() == NULL && domain_ != NULL) delete domain_;
  domain_ = NULL;
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool AssetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.AssetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.AssetResponse.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional uint64 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_asset;
        break;
      }

      // optional .Api.Asset asset = 4;
      case 4: {
        if (tag == 34) {
         parse_asset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_simpleAsset;
        break;
      }

      // optional .Api.SimpleAsset simpleAsset = 5;
      case 5: {
        if (tag == 42) {
         parse_simpleAsset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simpleasset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_domain;
        break;
      }

      // optional .Api.Domain domain = 6;
      case 6: {
        if (tag == 50) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_account;
        break;
      }

      // optional .Api.Account account = 7;
      case 7: {
        if (tag == 58) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_peer;
        break;
      }

      // optional .Api.Peer peer = 8;
      case 8: {
        if (tag == 66) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.AssetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.AssetResponse)
  return false;
#undef DO_
}

void AssetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.AssetResponse)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.AssetResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional uint64 code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->code(), output);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional .Api.Asset asset = 4;
  if (this->has_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->asset_, output);
  }

  // optional .Api.SimpleAsset simpleAsset = 5;
  if (this->has_simpleasset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->simpleasset_, output);
  }

  // optional .Api.Domain domain = 6;
  if (this->has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->domain_, output);
  }

  // optional .Api.Account account = 7;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->account_, output);
  }

  // optional .Api.Peer peer = 8;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->peer_, output);
  }

  // @@protoc_insertion_point(serialize_end:Api.AssetResponse)
}

::google::protobuf::uint8* AssetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.AssetResponse)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.AssetResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional uint64 code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->code(), target);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional .Api.Asset asset = 4;
  if (this->has_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->asset_, false, target);
  }

  // optional .Api.SimpleAsset simpleAsset = 5;
  if (this->has_simpleasset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->simpleasset_, false, target);
  }

  // optional .Api.Domain domain = 6;
  if (this->has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->domain_, false, target);
  }

  // optional .Api.Account account = 7;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->account_, false, target);
  }

  // optional .Api.Peer peer = 8;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->peer_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.AssetResponse)
  return target;
}

int AssetResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.AssetResponse)
  int total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional uint64 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->code());
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional .Api.Asset asset = 4;
  if (this->has_asset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_);
  }

  // optional .Api.SimpleAsset simpleAsset = 5;
  if (this->has_simpleasset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->simpleasset_);
  }

  // optional .Api.Domain domain = 6;
  if (this->has_domain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->domain_);
  }

  // optional .Api.Account account = 7;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->account_);
  }

  // optional .Api.Peer peer = 8;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.AssetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AssetResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AssetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.AssetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.AssetResponse)
    MergeFrom(*source);
  }
}

void AssetResponse::MergeFrom(const AssetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.AssetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_asset()) {
    mutable_asset()->::Api::Asset::MergeFrom(from.asset());
  }
  if (from.has_simpleasset()) {
    mutable_simpleasset()->::Api::SimpleAsset::MergeFrom(from.simpleasset());
  }
  if (from.has_domain()) {
    mutable_domain()->::Api::Domain::MergeFrom(from.domain());
  }
  if (from.has_account()) {
    mutable_account()->::Api::Account::MergeFrom(from.account());
  }
  if (from.has_peer()) {
    mutable_peer()->::Api::Peer::MergeFrom(from.peer());
  }
}

void AssetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.AssetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssetResponse::CopyFrom(const AssetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.AssetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssetResponse::IsInitialized() const {

  return true;
}

void AssetResponse::Swap(AssetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AssetResponse::InternalSwap(AssetResponse* other) {
  message_.Swap(&other->message_);
  std::swap(code_, other->code_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(asset_, other->asset_);
  std::swap(simpleasset_, other->simpleasset_);
  std::swap(domain_, other->domain_);
  std::swap(account_, other->account_);
  std::swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AssetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssetResponse_descriptor_;
  metadata.reflection = AssetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AssetResponse

// optional string message = 1;
void AssetResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AssetResponse::message() const {
  // @@protoc_insertion_point(field_get:Api.AssetResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.AssetResponse.message)
}
 void AssetResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.AssetResponse.message)
}
 void AssetResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.AssetResponse.message)
}
 ::std::string* AssetResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Api.AssetResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AssetResponse::release_message() {
  // @@protoc_insertion_point(field_release:Api.AssetResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AssetResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Api.AssetResponse.message)
}

// optional uint64 code = 2;
void AssetResponse::clear_code() {
  code_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AssetResponse::code() const {
  // @@protoc_insertion_point(field_get:Api.AssetResponse.code)
  return code_;
}
 void AssetResponse::set_code(::google::protobuf::uint64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Api.AssetResponse.code)
}

// optional uint64 timestamp = 3;
void AssetResponse::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AssetResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:Api.AssetResponse.timestamp)
  return timestamp_;
}
 void AssetResponse::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Api.AssetResponse.timestamp)
}

// optional .Api.Asset asset = 4;
bool AssetResponse::has_asset() const {
  return !_is_default_instance_ && asset_ != NULL;
}
void AssetResponse::clear_asset() {
  if (GetArenaNoVirtual() == NULL && asset_ != NULL) delete asset_;
  asset_ = NULL;
}
const ::Api::Asset& AssetResponse::asset() const {
  // @@protoc_insertion_point(field_get:Api.AssetResponse.asset)
  return asset_ != NULL ? *asset_ : *default_instance_->asset_;
}
::Api::Asset* AssetResponse::mutable_asset() {
  
  if (asset_ == NULL) {
    asset_ = new ::Api::Asset;
  }
  // @@protoc_insertion_point(field_mutable:Api.AssetResponse.asset)
  return asset_;
}
::Api::Asset* AssetResponse::release_asset() {
  // @@protoc_insertion_point(field_release:Api.AssetResponse.asset)
  
  ::Api::Asset* temp = asset_;
  asset_ = NULL;
  return temp;
}
void AssetResponse::set_allocated_asset(::Api::Asset* asset) {
  delete asset_;
  asset_ = asset;
  if (asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.AssetResponse.asset)
}

// optional .Api.SimpleAsset simpleAsset = 5;
bool AssetResponse::has_simpleasset() const {
  return !_is_default_instance_ && simpleasset_ != NULL;
}
void AssetResponse::clear_simpleasset() {
  if (GetArenaNoVirtual() == NULL && simpleasset_ != NULL) delete simpleasset_;
  simpleasset_ = NULL;
}
const ::Api::SimpleAsset& AssetResponse::simpleasset() const {
  // @@protoc_insertion_point(field_get:Api.AssetResponse.simpleAsset)
  return simpleasset_ != NULL ? *simpleasset_ : *default_instance_->simpleasset_;
}
::Api::SimpleAsset* AssetResponse::mutable_simpleasset() {
  
  if (simpleasset_ == NULL) {
    simpleasset_ = new ::Api::SimpleAsset;
  }
  // @@protoc_insertion_point(field_mutable:Api.AssetResponse.simpleAsset)
  return simpleasset_;
}
::Api::SimpleAsset* AssetResponse::release_simpleasset() {
  // @@protoc_insertion_point(field_release:Api.AssetResponse.simpleAsset)
  
  ::Api::SimpleAsset* temp = simpleasset_;
  simpleasset_ = NULL;
  return temp;
}
void AssetResponse::set_allocated_simpleasset(::Api::SimpleAsset* simpleasset) {
  delete simpleasset_;
  simpleasset_ = simpleasset;
  if (simpleasset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.AssetResponse.simpleAsset)
}

// optional .Api.Domain domain = 6;
bool AssetResponse::has_domain() const {
  return !_is_default_instance_ && domain_ != NULL;
}
void AssetResponse::clear_domain() {
  if (GetArenaNoVirtual() == NULL && domain_ != NULL) delete domain_;
  domain_ = NULL;
}
const ::Api::Domain& AssetResponse::domain() const {
  // @@protoc_insertion_point(field_get:Api.AssetResponse.domain)
  return domain_ != NULL ? *domain_ : *default_instance_->domain_;
}
::Api::Domain* AssetResponse::mutable_domain() {
  
  if (domain_ == NULL) {
    domain_ = new ::Api::Domain;
  }
  // @@protoc_insertion_point(field_mutable:Api.AssetResponse.domain)
  return domain_;
}
::Api::Domain* AssetResponse::release_domain() {
  // @@protoc_insertion_point(field_release:Api.AssetResponse.domain)
  
  ::Api::Domain* temp = domain_;
  domain_ = NULL;
  return temp;
}
void AssetResponse::set_allocated_domain(::Api::Domain* domain) {
  delete domain_;
  domain_ = domain;
  if (domain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.AssetResponse.domain)
}

// optional .Api.Account account = 7;
bool AssetResponse::has_account() const {
  return !_is_default_instance_ && account_ != NULL;
}
void AssetResponse::clear_account() {
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
}
const ::Api::Account& AssetResponse::account() const {
  // @@protoc_insertion_point(field_get:Api.AssetResponse.account)
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
::Api::Account* AssetResponse::mutable_account() {
  
  if (account_ == NULL) {
    account_ = new ::Api::Account;
  }
  // @@protoc_insertion_point(field_mutable:Api.AssetResponse.account)
  return account_;
}
::Api::Account* AssetResponse::release_account() {
  // @@protoc_insertion_point(field_release:Api.AssetResponse.account)
  
  ::Api::Account* temp = account_;
  account_ = NULL;
  return temp;
}
void AssetResponse::set_allocated_account(::Api::Account* account) {
  delete account_;
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.AssetResponse.account)
}

// optional .Api.Peer peer = 8;
bool AssetResponse::has_peer() const {
  return !_is_default_instance_ && peer_ != NULL;
}
void AssetResponse::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::Api::Peer& AssetResponse::peer() const {
  // @@protoc_insertion_point(field_get:Api.AssetResponse.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
::Api::Peer* AssetResponse::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::Api::Peer;
  }
  // @@protoc_insertion_point(field_mutable:Api.AssetResponse.peer)
  return peer_;
}
::Api::Peer* AssetResponse::release_peer() {
  // @@protoc_insertion_point(field_release:Api.AssetResponse.peer)
  
  ::Api::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void AssetResponse::set_allocated_peer(::Api::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.AssetResponse.peer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusResponse::kValueFieldNumber;
const int StatusResponse::kMessageFieldNumber;
const int StatusResponse::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusResponse::StatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.StatusResponse)
}

void StatusResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.StatusResponse)
}

void StatusResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:Api.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

StatusResponse* StatusResponse::default_instance_ = NULL;

StatusResponse* StatusResponse::New(::google::protobuf::Arena* arena) const {
  StatusResponse* n = new StatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.StatusResponse)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.StatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.StatusResponse.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.StatusResponse.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.StatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.StatusResponse)
  return false;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.StatusResponse)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.StatusResponse.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.StatusResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.StatusResponse)
}

::google::protobuf::uint8* StatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.StatusResponse)
  // optional string value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.StatusResponse.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.StatusResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.StatusResponse)
  return target;
}

int StatusResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.StatusResponse)
  int total_size = 0;

  // optional string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.StatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StatusResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.StatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.StatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {

  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusResponse::InternalSwap(StatusResponse* other) {
  value_.Swap(&other->value_);
  message_.Swap(&other->message_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusResponse

// optional string value = 1;
void StatusResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusResponse::value() const {
  // @@protoc_insertion_point(field_get:Api.StatusResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.StatusResponse.value)
}
 void StatusResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.StatusResponse.value)
}
 void StatusResponse::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.StatusResponse.value)
}
 ::std::string* StatusResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Api.StatusResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusResponse::release_value() {
  // @@protoc_insertion_point(field_release:Api.StatusResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Api.StatusResponse.value)
}

// optional string message = 2;
void StatusResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusResponse::message() const {
  // @@protoc_insertion_point(field_get:Api.StatusResponse.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.StatusResponse.message)
}
 void StatusResponse::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.StatusResponse.message)
}
 void StatusResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.StatusResponse.message)
}
 ::std::string* StatusResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:Api.StatusResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusResponse::release_message() {
  // @@protoc_insertion_point(field_release:Api.StatusResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Api.StatusResponse.message)
}

// optional uint64 timestamp = 3;
void StatusResponse::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StatusResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:Api.StatusResponse.timestamp)
  return timestamp_;
}
 void StatusResponse::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Api.StatusResponse.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Query::kTypeFieldNumber;
const int Query::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Query::Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Query)
}

void Query::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Query::Query(const Query& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Query)
}

void Query::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  value_.SetEntryDescriptor(
      &::Api::Query_ValueEntry_descriptor_);
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:Api.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_descriptor_;
}

const Query& Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

Query* Query::default_instance_ = NULL;

Query* Query::New(::google::protobuf::Arena* arena) const {
  Query* n = new Query;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Query::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Query)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.Clear();
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Query.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // map<string, .Api.BaseObject> value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(input->IncrementRecursionDepth());
         parse_loop_value:
          Query_ValueEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::Api::BaseObject,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::Api::BaseObject > > parser(&value_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Query.ValueEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_value;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Query)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Query.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // map<string, .Api.BaseObject> value = 2;
  if (!this->value().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Api.Query.ValueEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->value().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->value().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::Api::BaseObject >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Query_ValueEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Query_ValueEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it) {
        entry.reset(value_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:Api.Query)
}

::google::protobuf::uint8* Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.Query)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Query.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // map<string, .Api.BaseObject> value = 2;
  if (!this->value().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Api.Query.ValueEntry.key");
      }
    };

    if (deterministic &&
        this->value().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->value().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::Api::BaseObject >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Query_ValueEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Query_ValueEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it) {
        entry.reset(value_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.Query)
  return target;
}

int Query::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Query)
  int total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // map<string, .Api.BaseObject> value = 2;
  total_size += 1 * this->value_size();
  {
    ::google::protobuf::scoped_ptr<Query_ValueEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_iterator
        it = this->value().begin();
        it != this->value().end(); ++it) {
      entry.reset(value_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.Query)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Query* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.Query)
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Query)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {

  return true;
}

void Query::Swap(Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Query::InternalSwap(Query* other) {
  type_.Swap(&other->type_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Query_descriptor_;
  metadata.reflection = Query_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Query

// optional string type = 1;
void Query::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Query::type() const {
  // @@protoc_insertion_point(field_get:Api.Query.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Query::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Query.type)
}
 void Query::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Query.type)
}
 void Query::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Query.type)
}
 ::std::string* Query::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Api.Query.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Query::release_type() {
  // @@protoc_insertion_point(field_release:Api.Query.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Query::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Api.Query.type)
}

// map<string, .Api.BaseObject> value = 2;
int Query::value_size() const {
  return value_.size();
}
void Query::clear_value() {
  value_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::Api::BaseObject >&
Query::value() const {
  // @@protoc_insertion_point(field_map:Api.Query.value)
  return value_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::Api::BaseObject >*
Query::mutable_value() {
  // @@protoc_insertion_point(field_mutable_map:Api.Query.value)
  return value_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseObject::kValueStringFieldNumber;
const int BaseObject::kValueIntFieldNumber;
const int BaseObject::kValueBooleanFieldNumber;
const int BaseObject::kValueDoubleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseObject::BaseObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.BaseObject)
}

void BaseObject::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  BaseObject_default_oneof_instance_->valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  BaseObject_default_oneof_instance_->valueint_ = GOOGLE_LONGLONG(0);
  BaseObject_default_oneof_instance_->valueboolean_ = false;
  BaseObject_default_oneof_instance_->valuedouble_ = 0;
}

BaseObject::BaseObject(const BaseObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.BaseObject)
}

void BaseObject::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_value();
}

BaseObject::~BaseObject() {
  // @@protoc_insertion_point(destructor:Api.BaseObject)
  SharedDtor();
}

void BaseObject::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
  if (this != default_instance_) {
  }
}

void BaseObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseObject_descriptor_;
}

const BaseObject& BaseObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

BaseObject* BaseObject::default_instance_ = NULL;

BaseObject* BaseObject::New(::google::protobuf::Arena* arena) const {
  BaseObject* n = new BaseObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseObject::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:Api.BaseObject)
  switch(value_case()) {
    case kValueString: {
      value_.valuestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kValueInt: {
      // No need to clear
      break;
    }
    case kValueBoolean: {
      // No need to clear
      break;
    }
    case kValueDouble: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void BaseObject::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.BaseObject)
  clear_value();
}

bool BaseObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.BaseObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string valueString = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valuestring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->valuestring().data(), this->valuestring().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.BaseObject.valueString"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_valueInt;
        break;
      }

      // optional int64 valueInt = 2;
      case 2: {
        if (tag == 16) {
         parse_valueInt:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.valueint_)));
          set_has_valueint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_valueBoolean;
        break;
      }

      // optional bool valueBoolean = 3;
      case 3: {
        if (tag == 24) {
         parse_valueBoolean:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_.valueboolean_)));
          set_has_valueboolean();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_valueDouble;
        break;
      }

      // optional double valueDouble = 4;
      case 4: {
        if (tag == 33) {
         parse_valueDouble:
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_.valuedouble_)));
          set_has_valuedouble();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.BaseObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.BaseObject)
  return false;
#undef DO_
}

void BaseObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.BaseObject)
  // optional string valueString = 1;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.BaseObject.valueString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->valuestring(), output);
  }

  // optional int64 valueInt = 2;
  if (has_valueint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->valueint(), output);
  }

  // optional bool valueBoolean = 3;
  if (has_valueboolean()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->valueboolean(), output);
  }

  // optional double valueDouble = 4;
  if (has_valuedouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->valuedouble(), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.BaseObject)
}

::google::protobuf::uint8* BaseObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.BaseObject)
  // optional string valueString = 1;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.BaseObject.valueString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->valuestring(), target);
  }

  // optional int64 valueInt = 2;
  if (has_valueint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->valueint(), target);
  }

  // optional bool valueBoolean = 3;
  if (has_valueboolean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->valueboolean(), target);
  }

  // optional double valueDouble = 4;
  if (has_valuedouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->valuedouble(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.BaseObject)
  return target;
}

int BaseObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.BaseObject)
  int total_size = 0;

  switch (value_case()) {
    // optional string valueString = 1;
    case kValueString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valuestring());
      break;
    }
    // optional int64 valueInt = 2;
    case kValueInt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->valueint());
      break;
    }
    // optional bool valueBoolean = 3;
    case kValueBoolean: {
      total_size += 1 + 1;
      break;
    }
    // optional double valueDouble = 4;
    case kValueDouble: {
      total_size += 1 + 8;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.BaseObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BaseObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.BaseObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.BaseObject)
    MergeFrom(*source);
  }
}

void BaseObject::MergeFrom(const BaseObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.BaseObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.value_case()) {
    case kValueString: {
      set_valuestring(from.valuestring());
      break;
    }
    case kValueInt: {
      set_valueint(from.valueint());
      break;
    }
    case kValueBoolean: {
      set_valueboolean(from.valueboolean());
      break;
    }
    case kValueDouble: {
      set_valuedouble(from.valuedouble());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void BaseObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.BaseObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseObject::CopyFrom(const BaseObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.BaseObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseObject::IsInitialized() const {

  return true;
}

void BaseObject::Swap(BaseObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseObject::InternalSwap(BaseObject* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseObject_descriptor_;
  metadata.reflection = BaseObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseObject

// optional string valueString = 1;
bool BaseObject::has_valuestring() const {
  return value_case() == kValueString;
}
void BaseObject::set_has_valuestring() {
  _oneof_case_[0] = kValueString;
}
void BaseObject::clear_valuestring() {
  if (has_valuestring()) {
    value_.valuestring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
 const ::std::string& BaseObject::valuestring() const {
  // @@protoc_insertion_point(field_get:Api.BaseObject.valueString)
  if (has_valuestring()) {
    return value_.valuestring_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void BaseObject::set_valuestring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Api.BaseObject.valueString)
  if (!has_valuestring()) {
    clear_value();
    set_has_valuestring();
    value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.BaseObject.valueString)
}
 void BaseObject::set_valuestring(const char* value) {
  if (!has_valuestring()) {
    clear_value();
    set_has_valuestring();
    value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.BaseObject.valueString)
}
 void BaseObject::set_valuestring(const char* value, size_t size) {
  if (!has_valuestring()) {
    clear_value();
    set_has_valuestring();
    value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.valuestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.BaseObject.valueString)
}
 ::std::string* BaseObject::mutable_valuestring() {
  if (!has_valuestring()) {
    clear_value();
    set_has_valuestring();
    value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:Api.BaseObject.valueString)
  return value_.valuestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BaseObject::release_valuestring() {
  // @@protoc_insertion_point(field_release:Api.BaseObject.valueString)
  if (has_valuestring()) {
    clear_has_value();
    return value_.valuestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void BaseObject::set_allocated_valuestring(::std::string* valuestring) {
  if (!has_valuestring()) {
    value_.valuestring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (valuestring != NULL) {
    set_has_valuestring();
    value_.valuestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        valuestring);
  }
  // @@protoc_insertion_point(field_set_allocated:Api.BaseObject.valueString)
}

// optional int64 valueInt = 2;
bool BaseObject::has_valueint() const {
  return value_case() == kValueInt;
}
void BaseObject::set_has_valueint() {
  _oneof_case_[0] = kValueInt;
}
void BaseObject::clear_valueint() {
  if (has_valueint()) {
    value_.valueint_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
 ::google::protobuf::int64 BaseObject::valueint() const {
  // @@protoc_insertion_point(field_get:Api.BaseObject.valueInt)
  if (has_valueint()) {
    return value_.valueint_;
  }
  return GOOGLE_LONGLONG(0);
}
 void BaseObject::set_valueint(::google::protobuf::int64 value) {
  if (!has_valueint()) {
    clear_value();
    set_has_valueint();
  }
  value_.valueint_ = value;
  // @@protoc_insertion_point(field_set:Api.BaseObject.valueInt)
}

// optional bool valueBoolean = 3;
bool BaseObject::has_valueboolean() const {
  return value_case() == kValueBoolean;
}
void BaseObject::set_has_valueboolean() {
  _oneof_case_[0] = kValueBoolean;
}
void BaseObject::clear_valueboolean() {
  if (has_valueboolean()) {
    value_.valueboolean_ = false;
    clear_has_value();
  }
}
 bool BaseObject::valueboolean() const {
  // @@protoc_insertion_point(field_get:Api.BaseObject.valueBoolean)
  if (has_valueboolean()) {
    return value_.valueboolean_;
  }
  return false;
}
 void BaseObject::set_valueboolean(bool value) {
  if (!has_valueboolean()) {
    clear_value();
    set_has_valueboolean();
  }
  value_.valueboolean_ = value;
  // @@protoc_insertion_point(field_set:Api.BaseObject.valueBoolean)
}

// optional double valueDouble = 4;
bool BaseObject::has_valuedouble() const {
  return value_case() == kValueDouble;
}
void BaseObject::set_has_valuedouble() {
  _oneof_case_[0] = kValueDouble;
}
void BaseObject::clear_valuedouble() {
  if (has_valuedouble()) {
    value_.valuedouble_ = 0;
    clear_has_value();
  }
}
 double BaseObject::valuedouble() const {
  // @@protoc_insertion_point(field_get:Api.BaseObject.valueDouble)
  if (has_valuedouble()) {
    return value_.valuedouble_;
  }
  return 0;
}
 void BaseObject::set_valuedouble(double value) {
  if (!has_valuedouble()) {
    clear_value();
    set_has_valuedouble();
  }
  value_.valuedouble_ = value;
  // @@protoc_insertion_point(field_set:Api.BaseObject.valueDouble)
}

bool BaseObject::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void BaseObject::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
BaseObject::ValueCase BaseObject::value_case() const {
  return BaseObject::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleAsset::kDomainFieldNumber;
const int SimpleAsset::kNameFieldNumber;
const int SimpleAsset::kValueFieldNumber;
const int SimpleAsset::kSmartContractNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleAsset::SimpleAsset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.SimpleAsset)
}

void SimpleAsset::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  value_ = const_cast< ::Api::BaseObject*>(&::Api::BaseObject::default_instance());
}

SimpleAsset::SimpleAsset(const SimpleAsset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.SimpleAsset)
}

void SimpleAsset::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  smartcontractname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SimpleAsset::~SimpleAsset() {
  // @@protoc_insertion_point(destructor:Api.SimpleAsset)
  SharedDtor();
}

void SimpleAsset::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smartcontractname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete value_;
  }
}

void SimpleAsset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleAsset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleAsset_descriptor_;
}

const SimpleAsset& SimpleAsset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

SimpleAsset* SimpleAsset::default_instance_ = NULL;

SimpleAsset* SimpleAsset::New(::google::protobuf::Arena* arena) const {
  SimpleAsset* n = new SimpleAsset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimpleAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.SimpleAsset)
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
  smartcontractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SimpleAsset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.SimpleAsset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.SimpleAsset.domain"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.SimpleAsset.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional .Api.BaseObject value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_smartContractName;
        break;
      }

      // optional string smartContractName = 4;
      case 4: {
        if (tag == 34) {
         parse_smartContractName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smartcontractname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smartcontractname().data(), this->smartcontractname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.SimpleAsset.smartContractName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.SimpleAsset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.SimpleAsset)
  return false;
#undef DO_
}

void SimpleAsset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.SimpleAsset)
  // optional string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.SimpleAsset.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.SimpleAsset.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .Api.BaseObject value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  // optional string smartContractName = 4;
  if (this->smartcontractname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smartcontractname().data(), this->smartcontractname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.SimpleAsset.smartContractName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->smartcontractname(), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.SimpleAsset)
}

::google::protobuf::uint8* SimpleAsset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.SimpleAsset)
  // optional string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.SimpleAsset.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.SimpleAsset.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .Api.BaseObject value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->value_, false, target);
  }

  // optional string smartContractName = 4;
  if (this->smartcontractname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smartcontractname().data(), this->smartcontractname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.SimpleAsset.smartContractName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->smartcontractname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.SimpleAsset)
  return target;
}

int SimpleAsset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.SimpleAsset)
  int total_size = 0;

  // optional string domain = 1;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .Api.BaseObject value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // optional string smartContractName = 4;
  if (this->smartcontractname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smartcontractname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleAsset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.SimpleAsset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimpleAsset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimpleAsset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.SimpleAsset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.SimpleAsset)
    MergeFrom(*source);
  }
}

void SimpleAsset::MergeFrom(const SimpleAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.SimpleAsset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_value()) {
    mutable_value()->::Api::BaseObject::MergeFrom(from.value());
  }
  if (from.smartcontractname().size() > 0) {

    smartcontractname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smartcontractname_);
  }
}

void SimpleAsset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.SimpleAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleAsset::CopyFrom(const SimpleAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.SimpleAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleAsset::IsInitialized() const {

  return true;
}

void SimpleAsset::Swap(SimpleAsset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleAsset::InternalSwap(SimpleAsset* other) {
  domain_.Swap(&other->domain_);
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  smartcontractname_.Swap(&other->smartcontractname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimpleAsset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleAsset_descriptor_;
  metadata.reflection = SimpleAsset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimpleAsset

// optional string domain = 1;
void SimpleAsset::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SimpleAsset::domain() const {
  // @@protoc_insertion_point(field_get:Api.SimpleAsset.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleAsset::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.SimpleAsset.domain)
}
 void SimpleAsset::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.SimpleAsset.domain)
}
 void SimpleAsset::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.SimpleAsset.domain)
}
 ::std::string* SimpleAsset::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:Api.SimpleAsset.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimpleAsset::release_domain() {
  // @@protoc_insertion_point(field_release:Api.SimpleAsset.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleAsset::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:Api.SimpleAsset.domain)
}

// optional string name = 2;
void SimpleAsset::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SimpleAsset::name() const {
  // @@protoc_insertion_point(field_get:Api.SimpleAsset.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleAsset::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.SimpleAsset.name)
}
 void SimpleAsset::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.SimpleAsset.name)
}
 void SimpleAsset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.SimpleAsset.name)
}
 ::std::string* SimpleAsset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Api.SimpleAsset.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimpleAsset::release_name() {
  // @@protoc_insertion_point(field_release:Api.SimpleAsset.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleAsset::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Api.SimpleAsset.name)
}

// optional .Api.BaseObject value = 3;
bool SimpleAsset::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
void SimpleAsset::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::Api::BaseObject& SimpleAsset::value() const {
  // @@protoc_insertion_point(field_get:Api.SimpleAsset.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
::Api::BaseObject* SimpleAsset::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::Api::BaseObject;
  }
  // @@protoc_insertion_point(field_mutable:Api.SimpleAsset.value)
  return value_;
}
::Api::BaseObject* SimpleAsset::release_value() {
  // @@protoc_insertion_point(field_release:Api.SimpleAsset.value)
  
  ::Api::BaseObject* temp = value_;
  value_ = NULL;
  return temp;
}
void SimpleAsset::set_allocated_value(::Api::BaseObject* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.SimpleAsset.value)
}

// optional string smartContractName = 4;
void SimpleAsset::clear_smartcontractname() {
  smartcontractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SimpleAsset::smartcontractname() const {
  // @@protoc_insertion_point(field_get:Api.SimpleAsset.smartContractName)
  return smartcontractname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleAsset::set_smartcontractname(const ::std::string& value) {
  
  smartcontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.SimpleAsset.smartContractName)
}
 void SimpleAsset::set_smartcontractname(const char* value) {
  
  smartcontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.SimpleAsset.smartContractName)
}
 void SimpleAsset::set_smartcontractname(const char* value, size_t size) {
  
  smartcontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.SimpleAsset.smartContractName)
}
 ::std::string* SimpleAsset::mutable_smartcontractname() {
  
  // @@protoc_insertion_point(field_mutable:Api.SimpleAsset.smartContractName)
  return smartcontractname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimpleAsset::release_smartcontractname() {
  // @@protoc_insertion_point(field_release:Api.SimpleAsset.smartContractName)
  
  return smartcontractname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimpleAsset::set_allocated_smartcontractname(::std::string* smartcontractname) {
  if (smartcontractname != NULL) {
    
  } else {
    
  }
  smartcontractname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smartcontractname);
  // @@protoc_insertion_point(field_set_allocated:Api.SimpleAsset.smartContractName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Asset::kDomainFieldNumber;
const int Asset::kNameFieldNumber;
const int Asset::kValueFieldNumber;
const int Asset::kSmartContractNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Asset::Asset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Asset)
}

void Asset::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Asset::Asset(const Asset& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Asset)
}

void Asset::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  value_.SetEntryDescriptor(
      &::Api::Asset_ValueEntry_descriptor_);
  smartcontractname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:Api.Asset)
  SharedDtor();
}

void Asset::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smartcontractname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Asset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Asset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Asset_descriptor_;
}

const Asset& Asset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

Asset* Asset::default_instance_ = NULL;

Asset* Asset::New(::google::protobuf::Arena* arena) const {
  Asset* n = new Asset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Asset)
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smartcontractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.Clear();
}

bool Asset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.Asset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Asset.domain"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Asset.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // map<string, .Api.BaseObject> value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(input->IncrementRecursionDepth());
         parse_loop_value:
          Asset_ValueEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::Api::BaseObject,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::Api::BaseObject > > parser(&value_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Asset.ValueEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_value;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_smartContractName;
        break;
      }

      // optional string smartContractName = 4;
      case 4: {
        if (tag == 34) {
         parse_smartContractName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smartcontractname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smartcontractname().data(), this->smartcontractname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Asset.smartContractName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Asset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Asset)
  return false;
#undef DO_
}

void Asset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Asset)
  // optional string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Asset.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Asset.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // map<string, .Api.BaseObject> value = 3;
  if (!this->value().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Api.Asset.ValueEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->value().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->value().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::Api::BaseObject >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Asset_ValueEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Asset_ValueEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it) {
        entry.reset(value_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string smartContractName = 4;
  if (this->smartcontractname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smartcontractname().data(), this->smartcontractname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Asset.smartContractName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->smartcontractname(), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.Asset)
}

::google::protobuf::uint8* Asset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.Asset)
  // optional string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Asset.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Asset.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // map<string, .Api.BaseObject> value = 3;
  if (!this->value().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "Api.Asset.ValueEntry.key");
      }
    };

    if (deterministic &&
        this->value().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->value().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::Api::BaseObject >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Asset_ValueEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(value_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Asset_ValueEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_iterator
          it = this->value().begin();
          it != this->value().end(); ++it) {
        entry.reset(value_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string smartContractName = 4;
  if (this->smartcontractname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smartcontractname().data(), this->smartcontractname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Asset.smartContractName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->smartcontractname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.Asset)
  return target;
}

int Asset::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Asset)
  int total_size = 0;

  // optional string domain = 1;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string smartContractName = 4;
  if (this->smartcontractname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smartcontractname());
  }

  // map<string, .Api.BaseObject> value = 3;
  total_size += 1 * this->value_size();
  {
    ::google::protobuf::scoped_ptr<Asset_ValueEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::Api::BaseObject >::const_iterator
        it = this->value().begin();
        it != this->value().end(); ++it) {
      entry.reset(value_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Asset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Asset* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Asset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.Asset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.Asset)
    MergeFrom(*source);
  }
}

void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Asset)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.smartcontractname().size() > 0) {

    smartcontractname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smartcontractname_);
  }
}

void Asset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {

  return true;
}

void Asset::Swap(Asset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Asset::InternalSwap(Asset* other) {
  domain_.Swap(&other->domain_);
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  smartcontractname_.Swap(&other->smartcontractname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Asset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Asset_descriptor_;
  metadata.reflection = Asset_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Asset

// optional string domain = 1;
void Asset::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Asset::domain() const {
  // @@protoc_insertion_point(field_get:Api.Asset.domain)
  return domain_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Asset::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Asset.domain)
}
 void Asset::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Asset.domain)
}
 void Asset::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Asset.domain)
}
 ::std::string* Asset::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:Api.Asset.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Asset::release_domain() {
  // @@protoc_insertion_point(field_release:Api.Asset.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Asset::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:Api.Asset.domain)
}

// optional string name = 2;
void Asset::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Asset::name() const {
  // @@protoc_insertion_point(field_get:Api.Asset.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Asset::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Asset.name)
}
 void Asset::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Asset.name)
}
 void Asset::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Asset.name)
}
 ::std::string* Asset::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Api.Asset.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Asset::release_name() {
  // @@protoc_insertion_point(field_release:Api.Asset.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Asset::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Api.Asset.name)
}

// map<string, .Api.BaseObject> value = 3;
int Asset::value_size() const {
  return value_.size();
}
void Asset::clear_value() {
  value_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::Api::BaseObject >&
Asset::value() const {
  // @@protoc_insertion_point(field_map:Api.Asset.value)
  return value_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::Api::BaseObject >*
Asset::mutable_value() {
  // @@protoc_insertion_point(field_mutable_map:Api.Asset.value)
  return value_.MutableMap();
}

// optional string smartContractName = 4;
void Asset::clear_smartcontractname() {
  smartcontractname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Asset::smartcontractname() const {
  // @@protoc_insertion_point(field_get:Api.Asset.smartContractName)
  return smartcontractname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Asset::set_smartcontractname(const ::std::string& value) {
  
  smartcontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Asset.smartContractName)
}
 void Asset::set_smartcontractname(const char* value) {
  
  smartcontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Asset.smartContractName)
}
 void Asset::set_smartcontractname(const char* value, size_t size) {
  
  smartcontractname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Asset.smartContractName)
}
 ::std::string* Asset::mutable_smartcontractname() {
  
  // @@protoc_insertion_point(field_mutable:Api.Asset.smartContractName)
  return smartcontractname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Asset::release_smartcontractname() {
  // @@protoc_insertion_point(field_release:Api.Asset.smartContractName)
  
  return smartcontractname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Asset::set_allocated_smartcontractname(::std::string* smartcontractname) {
  if (smartcontractname != NULL) {
    
  } else {
    
  }
  smartcontractname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smartcontractname);
  // @@protoc_insertion_point(field_set_allocated:Api.Asset.smartContractName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Domain::kOwnerPublicKeyFieldNumber;
const int Domain::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Domain::Domain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Domain)
}

void Domain::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Domain::Domain(const Domain& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Domain)
}

void Domain::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ownerpublickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Domain::~Domain() {
  // @@protoc_insertion_point(destructor:Api.Domain)
  SharedDtor();
}

void Domain::SharedDtor() {
  ownerpublickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Domain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Domain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Domain_descriptor_;
}

const Domain& Domain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

Domain* Domain::default_instance_ = NULL;

Domain* Domain::New(::google::protobuf::Arena* arena) const {
  Domain* n = new Domain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Domain::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Domain)
  ownerpublickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Domain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.Domain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ownerPublicKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownerpublickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ownerpublickey().data(), this->ownerpublickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Domain.ownerPublicKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Domain.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Domain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Domain)
  return false;
#undef DO_
}

void Domain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Domain)
  // optional string ownerPublicKey = 1;
  if (this->ownerpublickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ownerpublickey().data(), this->ownerpublickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Domain.ownerPublicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ownerpublickey(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Domain.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.Domain)
}

::google::protobuf::uint8* Domain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.Domain)
  // optional string ownerPublicKey = 1;
  if (this->ownerpublickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ownerpublickey().data(), this->ownerpublickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Domain.ownerPublicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ownerpublickey(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Domain.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.Domain)
  return target;
}

int Domain::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Domain)
  int total_size = 0;

  // optional string ownerPublicKey = 1;
  if (this->ownerpublickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ownerpublickey());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Domain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.Domain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Domain* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Domain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.Domain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.Domain)
    MergeFrom(*source);
  }
}

void Domain::MergeFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Domain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ownerpublickey().size() > 0) {

    ownerpublickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ownerpublickey_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Domain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Domain::CopyFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Domain::IsInitialized() const {

  return true;
}

void Domain::Swap(Domain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Domain::InternalSwap(Domain* other) {
  ownerpublickey_.Swap(&other->ownerpublickey_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Domain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Domain_descriptor_;
  metadata.reflection = Domain_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Domain

// optional string ownerPublicKey = 1;
void Domain::clear_ownerpublickey() {
  ownerpublickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Domain::ownerpublickey() const {
  // @@protoc_insertion_point(field_get:Api.Domain.ownerPublicKey)
  return ownerpublickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Domain::set_ownerpublickey(const ::std::string& value) {
  
  ownerpublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Domain.ownerPublicKey)
}
 void Domain::set_ownerpublickey(const char* value) {
  
  ownerpublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Domain.ownerPublicKey)
}
 void Domain::set_ownerpublickey(const char* value, size_t size) {
  
  ownerpublickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Domain.ownerPublicKey)
}
 ::std::string* Domain::mutable_ownerpublickey() {
  
  // @@protoc_insertion_point(field_mutable:Api.Domain.ownerPublicKey)
  return ownerpublickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Domain::release_ownerpublickey() {
  // @@protoc_insertion_point(field_release:Api.Domain.ownerPublicKey)
  
  return ownerpublickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Domain::set_allocated_ownerpublickey(::std::string* ownerpublickey) {
  if (ownerpublickey != NULL) {
    
  } else {
    
  }
  ownerpublickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ownerpublickey);
  // @@protoc_insertion_point(field_set_allocated:Api.Domain.ownerPublicKey)
}

// optional string name = 2;
void Domain::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Domain::name() const {
  // @@protoc_insertion_point(field_get:Api.Domain.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Domain::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Domain.name)
}
 void Domain::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Domain.name)
}
 void Domain::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Domain.name)
}
 ::std::string* Domain::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Api.Domain.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Domain::release_name() {
  // @@protoc_insertion_point(field_release:Api.Domain.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Domain::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Api.Domain.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Account::kPublicKeyFieldNumber;
const int Account::kNameFieldNumber;
const int Account::kAssetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Account::Account()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Account)
}

void Account::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Account::Account(const Account& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Account)
}

void Account::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:Api.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_descriptor_;
}

const Account& Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

Account* Account::default_instance_ = NULL;

Account* Account::New(::google::protobuf::Arena* arena) const {
  Account* n = new Account;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Account)
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assets_.Clear();
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.Account)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string publicKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Account.publicKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Account.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_assets;
        break;
      }

      // repeated string assets = 3;
      case 3: {
        if (tag == 26) {
         parse_assets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_assets()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assets(this->assets_size() - 1).data(),
            this->assets(this->assets_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Account.assets"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_assets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Account)
  return false;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Account)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Account.publicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->publickey(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Account.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated string assets = 3;
  for (int i = 0; i < this->assets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assets(i).data(), this->assets(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Account.assets");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->assets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.Account)
}

::google::protobuf::uint8* Account::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.Account)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Account.publicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publickey(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Account.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated string assets = 3;
  for (int i = 0; i < this->assets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assets(i).data(), this->assets(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Account.assets");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->assets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.Account)
  return target;
}

int Account::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Account)
  int total_size = 0;

  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // repeated string assets = 3;
  total_size += 1 * this->assets_size();
  for (int i = 0; i < this->assets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->assets(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.Account)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Account* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Account>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.Account)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Account)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  assets_.MergeFrom(from.assets_);
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {

  return true;
}

void Account::Swap(Account* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Account::InternalSwap(Account* other) {
  publickey_.Swap(&other->publickey_);
  name_.Swap(&other->name_);
  assets_.UnsafeArenaSwap(&other->assets_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_descriptor_;
  metadata.reflection = Account_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Account

// optional string publicKey = 1;
void Account::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Account::publickey() const {
  // @@protoc_insertion_point(field_get:Api.Account.publicKey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Account::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Account.publicKey)
}
 void Account::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Account.publicKey)
}
 void Account::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Account.publicKey)
}
 ::std::string* Account::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Api.Account.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Account::release_publickey() {
  // @@protoc_insertion_point(field_release:Api.Account.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Account::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Api.Account.publicKey)
}

// optional string name = 2;
void Account::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Account::name() const {
  // @@protoc_insertion_point(field_get:Api.Account.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Account::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Account.name)
}
 void Account::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Account.name)
}
 void Account::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Account.name)
}
 ::std::string* Account::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Api.Account.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Account::release_name() {
  // @@protoc_insertion_point(field_release:Api.Account.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Account::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Api.Account.name)
}

// repeated string assets = 3;
int Account::assets_size() const {
  return assets_.size();
}
void Account::clear_assets() {
  assets_.Clear();
}
 const ::std::string& Account::assets(int index) const {
  // @@protoc_insertion_point(field_get:Api.Account.assets)
  return assets_.Get(index);
}
 ::std::string* Account::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:Api.Account.assets)
  return assets_.Mutable(index);
}
 void Account::set_assets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Api.Account.assets)
  assets_.Mutable(index)->assign(value);
}
 void Account::set_assets(int index, const char* value) {
  assets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Api.Account.assets)
}
 void Account::set_assets(int index, const char* value, size_t size) {
  assets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Api.Account.assets)
}
 ::std::string* Account::add_assets() {
  // @@protoc_insertion_point(field_add_mutable:Api.Account.assets)
  return assets_.Add();
}
 void Account::add_assets(const ::std::string& value) {
  assets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Api.Account.assets)
}
 void Account::add_assets(const char* value) {
  assets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Api.Account.assets)
}
 void Account::add_assets(const char* value, size_t size) {
  assets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Api.Account.assets)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Account::assets() const {
  // @@protoc_insertion_point(field_list:Api.Account.assets)
  return assets_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Account::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:Api.Account.assets)
  return &assets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trust::kValueFieldNumber;
const int Trust::kIsOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trust::Trust()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Trust)
}

void Trust::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Trust::Trust(const Trust& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Trust)
}

void Trust::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0;
  isok_ = false;
}

Trust::~Trust() {
  // @@protoc_insertion_point(destructor:Api.Trust)
  SharedDtor();
}

void Trust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Trust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trust_descriptor_;
}

const Trust& Trust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

Trust* Trust::default_instance_ = NULL;

Trust* Trust::New(::google::protobuf::Arena* arena) const {
  Trust* n = new Trust;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trust::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Trust)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Trust, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Trust*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, isok_);

#undef ZR_HELPER_
#undef ZR_

}

bool Trust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.Trust)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isOk;
        break;
      }

      // optional bool isOk = 2;
      case 2: {
        if (tag == 16) {
         parse_isOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isok_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Trust)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Trust)
  return false;
#undef DO_
}

void Trust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Trust)
  // optional double value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // optional bool isOk = 2;
  if (this->isok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isok(), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.Trust)
}

::google::protobuf::uint8* Trust::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.Trust)
  // optional double value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // optional bool isOk = 2;
  if (this->isok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isok(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.Trust)
  return target;
}

int Trust::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Trust)
  int total_size = 0;

  // optional double value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // optional bool isOk = 2;
  if (this->isok() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trust::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.Trust)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Trust* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Trust>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.Trust)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.Trust)
    MergeFrom(*source);
  }
}

void Trust::MergeFrom(const Trust& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Trust)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.isok() != 0) {
    set_isok(from.isok());
  }
}

void Trust::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.Trust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trust::CopyFrom(const Trust& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Trust)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trust::IsInitialized() const {

  return true;
}

void Trust::Swap(Trust* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trust::InternalSwap(Trust* other) {
  std::swap(value_, other->value_);
  std::swap(isok_, other->isok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trust_descriptor_;
  metadata.reflection = Trust_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trust

// optional double value = 1;
void Trust::clear_value() {
  value_ = 0;
}
 double Trust::value() const {
  // @@protoc_insertion_point(field_get:Api.Trust.value)
  return value_;
}
 void Trust::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Api.Trust.value)
}

// optional bool isOk = 2;
void Trust::clear_isok() {
  isok_ = false;
}
 bool Trust::isok() const {
  // @@protoc_insertion_point(field_get:Api.Trust.isOk)
  return isok_;
}
 void Trust::set_isok(bool value) {
  
  isok_ = value;
  // @@protoc_insertion_point(field_set:Api.Trust.isOk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kPublicKeyFieldNumber;
const int Peer::kAddressFieldNumber;
const int Peer::kTrustFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Peer)
}

void Peer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  trust_ = const_cast< ::Api::Trust*>(&::Api::Trust::default_instance());
}

Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Peer)
}

void Peer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trust_ = NULL;
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:Api.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete trust_;
  }
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Peer_descriptor_;
}

const Peer& Peer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

Peer* Peer::default_instance_ = NULL;

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Peer)
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && trust_ != NULL) delete trust_;
  trust_ = NULL;
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string publicKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Peer.publicKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (tag == 18) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Peer.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_trust;
        break;
      }

      // optional .Api.Trust trust = 3;
      case 3: {
        if (tag == 26) {
         parse_trust:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trust()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Peer)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Peer.publicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->publickey(), output);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Peer.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->address(), output);
  }

  // optional .Api.Trust trust = 3;
  if (this->has_trust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->trust_, output);
  }

  // @@protoc_insertion_point(serialize_end:Api.Peer)
}

::google::protobuf::uint8* Peer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.Peer)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Peer.publicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publickey(), target);
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Peer.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // optional .Api.Trust trust = 3;
  if (this->has_trust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->trust_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.Peer)
  return target;
}

int Peer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Peer)
  int total_size = 0;

  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  // optional string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // optional .Api.Trust trust = 3;
  if (this->has_trust()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trust_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.Peer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Peer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.Peer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Peer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_trust()) {
    mutable_trust()->::Api::Trust::MergeFrom(from.trust());
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {

  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  publickey_.Swap(&other->publickey_);
  address_.Swap(&other->address_);
  std::swap(trust_, other->trust_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Peer_descriptor_;
  metadata.reflection = Peer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Peer

// optional string publicKey = 1;
void Peer::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Peer::publickey() const {
  // @@protoc_insertion_point(field_get:Api.Peer.publicKey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Peer::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Peer.publicKey)
}
 void Peer::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Peer.publicKey)
}
 void Peer::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Peer.publicKey)
}
 ::std::string* Peer::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Api.Peer.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Peer::release_publickey() {
  // @@protoc_insertion_point(field_release:Api.Peer.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Peer::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Api.Peer.publicKey)
}

// optional string address = 2;
void Peer::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Peer::address() const {
  // @@protoc_insertion_point(field_get:Api.Peer.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Peer::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Peer.address)
}
 void Peer::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Peer.address)
}
 void Peer::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Peer.address)
}
 ::std::string* Peer::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:Api.Peer.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Peer::release_address() {
  // @@protoc_insertion_point(field_release:Api.Peer.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Peer::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Api.Peer.address)
}

// optional .Api.Trust trust = 3;
bool Peer::has_trust() const {
  return !_is_default_instance_ && trust_ != NULL;
}
void Peer::clear_trust() {
  if (GetArenaNoVirtual() == NULL && trust_ != NULL) delete trust_;
  trust_ = NULL;
}
const ::Api::Trust& Peer::trust() const {
  // @@protoc_insertion_point(field_get:Api.Peer.trust)
  return trust_ != NULL ? *trust_ : *default_instance_->trust_;
}
::Api::Trust* Peer::mutable_trust() {
  
  if (trust_ == NULL) {
    trust_ = new ::Api::Trust;
  }
  // @@protoc_insertion_point(field_mutable:Api.Peer.trust)
  return trust_;
}
::Api::Trust* Peer::release_trust() {
  // @@protoc_insertion_point(field_release:Api.Peer.trust)
  
  ::Api::Trust* temp = trust_;
  trust_ = NULL;
  return temp;
}
void Peer::set_allocated_trust(::Api::Trust* trust) {
  delete trust_;
  trust_ = trust;
  if (trust) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.Peer.trust)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxSignatures::kPublicKeyFieldNumber;
const int TxSignatures::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxSignatures::TxSignatures()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.TxSignatures)
}

void TxSignatures::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TxSignatures::TxSignatures(const TxSignatures& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.TxSignatures)
}

void TxSignatures::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TxSignatures::~TxSignatures() {
  // @@protoc_insertion_point(destructor:Api.TxSignatures)
  SharedDtor();
}

void TxSignatures::SharedDtor() {
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TxSignatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxSignatures::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxSignatures_descriptor_;
}

const TxSignatures& TxSignatures::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

TxSignatures* TxSignatures::default_instance_ = NULL;

TxSignatures* TxSignatures::New(::google::protobuf::Arena* arena) const {
  TxSignatures* n = new TxSignatures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxSignatures::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.TxSignatures)
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TxSignatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.TxSignatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string publicKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.TxSignatures.publicKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional string signature = 2;
      case 2: {
        if (tag == 18) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.TxSignatures.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.TxSignatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.TxSignatures)
  return false;
#undef DO_
}

void TxSignatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.TxSignatures)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.TxSignatures.publicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->publickey(), output);
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.TxSignatures.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.TxSignatures)
}

::google::protobuf::uint8* TxSignatures::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.TxSignatures)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.TxSignatures.publicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publickey(), target);
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.TxSignatures.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.TxSignatures)
  return target;
}

int TxSignatures::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.TxSignatures)
  int total_size = 0;

  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxSignatures::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.TxSignatures)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TxSignatures* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TxSignatures>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.TxSignatures)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.TxSignatures)
    MergeFrom(*source);
  }
}

void TxSignatures::MergeFrom(const TxSignatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.TxSignatures)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void TxSignatures::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.TxSignatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxSignatures::CopyFrom(const TxSignatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.TxSignatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxSignatures::IsInitialized() const {

  return true;
}

void TxSignatures::Swap(TxSignatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxSignatures::InternalSwap(TxSignatures* other) {
  publickey_.Swap(&other->publickey_);
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxSignatures::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxSignatures_descriptor_;
  metadata.reflection = TxSignatures_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxSignatures

// optional string publicKey = 1;
void TxSignatures::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TxSignatures::publickey() const {
  // @@protoc_insertion_point(field_get:Api.TxSignatures.publicKey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxSignatures::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.TxSignatures.publicKey)
}
 void TxSignatures::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.TxSignatures.publicKey)
}
 void TxSignatures::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.TxSignatures.publicKey)
}
 ::std::string* TxSignatures::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Api.TxSignatures.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TxSignatures::release_publickey() {
  // @@protoc_insertion_point(field_release:Api.TxSignatures.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxSignatures::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Api.TxSignatures.publicKey)
}

// optional string signature = 2;
void TxSignatures::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TxSignatures::signature() const {
  // @@protoc_insertion_point(field_get:Api.TxSignatures.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxSignatures::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.TxSignatures.signature)
}
 void TxSignatures::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.TxSignatures.signature)
}
 void TxSignatures::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.TxSignatures.signature)
}
 ::std::string* TxSignatures::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Api.TxSignatures.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TxSignatures::release_signature() {
  // @@protoc_insertion_point(field_release:Api.TxSignatures.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxSignatures::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Api.TxSignatures.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventSignature::kPublicKeyFieldNumber;
const int EventSignature::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventSignature::EventSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.EventSignature)
}

void EventSignature::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EventSignature::EventSignature(const EventSignature& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.EventSignature)
}

void EventSignature::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  publickey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EventSignature::~EventSignature() {
  // @@protoc_insertion_point(destructor:Api.EventSignature)
  SharedDtor();
}

void EventSignature::SharedDtor() {
  publickey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EventSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventSignature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventSignature_descriptor_;
}

const EventSignature& EventSignature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

EventSignature* EventSignature::default_instance_ = NULL;

EventSignature* EventSignature::New(::google::protobuf::Arena* arena) const {
  EventSignature* n = new EventSignature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.EventSignature)
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EventSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.EventSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string publicKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publickey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->publickey().data(), this->publickey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.EventSignature.publicKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional string signature = 2;
      case 2: {
        if (tag == 18) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.EventSignature.signature"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.EventSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.EventSignature)
  return false;
#undef DO_
}

void EventSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.EventSignature)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.EventSignature.publicKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->publickey(), output);
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.EventSignature.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signature(), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.EventSignature)
}

::google::protobuf::uint8* EventSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.EventSignature)
  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->publickey().data(), this->publickey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.EventSignature.publicKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->publickey(), target);
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.EventSignature.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.EventSignature)
  return target;
}

int EventSignature::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.EventSignature)
  int total_size = 0;

  // optional string publicKey = 1;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->publickey());
  }

  // optional string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.EventSignature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EventSignature* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EventSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.EventSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.EventSignature)
    MergeFrom(*source);
  }
}

void EventSignature::MergeFrom(const EventSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.EventSignature)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void EventSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.EventSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSignature::CopyFrom(const EventSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.EventSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSignature::IsInitialized() const {

  return true;
}

void EventSignature::Swap(EventSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventSignature::InternalSwap(EventSignature* other) {
  publickey_.Swap(&other->publickey_);
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventSignature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventSignature_descriptor_;
  metadata.reflection = EventSignature_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventSignature

// optional string publicKey = 1;
void EventSignature::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EventSignature::publickey() const {
  // @@protoc_insertion_point(field_get:Api.EventSignature.publicKey)
  return publickey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventSignature::set_publickey(const ::std::string& value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.EventSignature.publicKey)
}
 void EventSignature::set_publickey(const char* value) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.EventSignature.publicKey)
}
 void EventSignature::set_publickey(const char* value, size_t size) {
  
  publickey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.EventSignature.publicKey)
}
 ::std::string* EventSignature::mutable_publickey() {
  
  // @@protoc_insertion_point(field_mutable:Api.EventSignature.publicKey)
  return publickey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EventSignature::release_publickey() {
  // @@protoc_insertion_point(field_release:Api.EventSignature.publicKey)
  
  return publickey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventSignature::set_allocated_publickey(::std::string* publickey) {
  if (publickey != NULL) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:Api.EventSignature.publicKey)
}

// optional string signature = 2;
void EventSignature::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EventSignature::signature() const {
  // @@protoc_insertion_point(field_get:Api.EventSignature.signature)
  return signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventSignature::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.EventSignature.signature)
}
 void EventSignature::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.EventSignature.signature)
}
 void EventSignature::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.EventSignature.signature)
}
 ::std::string* EventSignature::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Api.EventSignature.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EventSignature::release_signature() {
  // @@protoc_insertion_point(field_release:Api.EventSignature.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EventSignature::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Api.EventSignature.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transaction::kTxSignaturesFieldNumber;
const int Transaction::kTypeFieldNumber;
const int Transaction::kSenderPubkeyFieldNumber;
const int Transaction::kHashFieldNumber;
const int Transaction::kTimestampFieldNumber;
const int Transaction::kAssetFieldNumber;
const int Transaction::kSimpleAssetFieldNumber;
const int Transaction::kDomainFieldNumber;
const int Transaction::kAccountFieldNumber;
const int Transaction::kPeerFieldNumber;
const int Transaction::kReceivePubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transaction::Transaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.Transaction)
}

void Transaction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  asset_ = const_cast< ::Api::Asset*>(&::Api::Asset::default_instance());
  simpleasset_ = const_cast< ::Api::SimpleAsset*>(&::Api::SimpleAsset::default_instance());
  domain_ = const_cast< ::Api::Domain*>(&::Api::Domain::default_instance());
  account_ = const_cast< ::Api::Account*>(&::Api::Account::default_instance());
  peer_ = const_cast< ::Api::Peer*>(&::Api::Peer::default_instance());
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.Transaction)
}

void Transaction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderpubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  asset_ = NULL;
  simpleasset_ = NULL;
  domain_ = NULL;
  account_ = NULL;
  peer_ = NULL;
  receivepubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:Api.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderpubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receivepubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete asset_;
    delete simpleasset_;
    delete domain_;
    delete account_;
    delete peer_;
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New(::google::protobuf::Arena* arena) const {
  Transaction* n = new Transaction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.Transaction)
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && asset_ != NULL) delete asset_;
  asset_ = NULL;
  if (GetArenaNoVirtual() == NULL && simpleasset_ != NULL) delete simpleasset_;
  simpleasset_ = NULL;
  if (GetArenaNoVirtual() == NULL && domain_ != NULL) delete domain_;
  domain_ = NULL;
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
  receivepubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  txsignatures_.Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Api.TxSignatures txSignatures = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_txSignatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_txsignatures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_txSignatures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Transaction.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_senderPubkey;
        break;
      }

      // optional string senderPubkey = 3;
      case 3: {
        if (tag == 26) {
         parse_senderPubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_senderpubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->senderpubkey().data(), this->senderpubkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Transaction.senderPubkey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hash;
        break;
      }

      // optional string hash = 4;
      case 4: {
        if (tag == 34) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Transaction.hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_asset;
        break;
      }

      // optional .Api.Asset asset = 6;
      case 6: {
        if (tag == 50) {
         parse_asset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_simpleAsset;
        break;
      }

      // optional .Api.SimpleAsset simpleAsset = 7;
      case 7: {
        if (tag == 58) {
         parse_simpleAsset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simpleasset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_domain;
        break;
      }

      // optional .Api.Domain domain = 8;
      case 8: {
        if (tag == 66) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_account;
        break;
      }

      // optional .Api.Account account = 9;
      case 9: {
        if (tag == 74) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_peer;
        break;
      }

      // optional .Api.Peer peer = 10;
      case 10: {
        if (tag == 82) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_receivePubkey;
        break;
      }

      // optional string receivePubkey = 11;
      case 11: {
        if (tag == 90) {
         parse_receivePubkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receivepubkey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->receivepubkey().data(), this->receivepubkey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.Transaction.receivePubkey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.Transaction)
  // repeated .Api.TxSignatures txSignatures = 1;
  for (unsigned int i = 0, n = this->txsignatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->txsignatures(i), output);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Transaction.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional string senderPubkey = 3;
  if (this->senderpubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senderpubkey().data(), this->senderpubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Transaction.senderPubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->senderpubkey(), output);
  }

  // optional string hash = 4;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Transaction.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hash(), output);
  }

  // optional uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // optional .Api.Asset asset = 6;
  if (this->has_asset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->asset_, output);
  }

  // optional .Api.SimpleAsset simpleAsset = 7;
  if (this->has_simpleasset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->simpleasset_, output);
  }

  // optional .Api.Domain domain = 8;
  if (this->has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->domain_, output);
  }

  // optional .Api.Account account = 9;
  if (this->has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->account_, output);
  }

  // optional .Api.Peer peer = 10;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->peer_, output);
  }

  // optional string receivePubkey = 11;
  if (this->receivepubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receivepubkey().data(), this->receivepubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Transaction.receivePubkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->receivepubkey(), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.Transaction)
}

::google::protobuf::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.Transaction)
  // repeated .Api.TxSignatures txSignatures = 1;
  for (unsigned int i = 0, n = this->txsignatures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->txsignatures(i), false, target);
  }

  // optional string type = 2;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Transaction.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional string senderPubkey = 3;
  if (this->senderpubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->senderpubkey().data(), this->senderpubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Transaction.senderPubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->senderpubkey(), target);
  }

  // optional string hash = 4;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Transaction.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hash(), target);
  }

  // optional uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // optional .Api.Asset asset = 6;
  if (this->has_asset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->asset_, false, target);
  }

  // optional .Api.SimpleAsset simpleAsset = 7;
  if (this->has_simpleasset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->simpleasset_, false, target);
  }

  // optional .Api.Domain domain = 8;
  if (this->has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->domain_, false, target);
  }

  // optional .Api.Account account = 9;
  if (this->has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->account_, false, target);
  }

  // optional .Api.Peer peer = 10;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->peer_, false, target);
  }

  // optional string receivePubkey = 11;
  if (this->receivepubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->receivepubkey().data(), this->receivepubkey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.Transaction.receivePubkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->receivepubkey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.Transaction)
  return target;
}

int Transaction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.Transaction)
  int total_size = 0;

  // optional string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // optional string senderPubkey = 3;
  if (this->senderpubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->senderpubkey());
  }

  // optional string hash = 4;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  // optional uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional .Api.Asset asset = 6;
  if (this->has_asset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->asset_);
  }

  // optional .Api.SimpleAsset simpleAsset = 7;
  if (this->has_simpleasset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->simpleasset_);
  }

  // optional .Api.Domain domain = 8;
  if (this->has_domain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->domain_);
  }

  // optional .Api.Account account = 9;
  if (this->has_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->account_);
  }

  // optional .Api.Peer peer = 10;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  // optional string receivePubkey = 11;
  if (this->receivepubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->receivepubkey());
  }

  // repeated .Api.TxSignatures txSignatures = 1;
  total_size += 1 * this->txsignatures_size();
  for (int i = 0; i < this->txsignatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->txsignatures(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.Transaction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Transaction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Transaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.Transaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.Transaction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  txsignatures_.MergeFrom(from.txsignatures_);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.senderpubkey().size() > 0) {

    senderpubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderpubkey_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_asset()) {
    mutable_asset()->::Api::Asset::MergeFrom(from.asset());
  }
  if (from.has_simpleasset()) {
    mutable_simpleasset()->::Api::SimpleAsset::MergeFrom(from.simpleasset());
  }
  if (from.has_domain()) {
    mutable_domain()->::Api::Domain::MergeFrom(from.domain());
  }
  if (from.has_account()) {
    mutable_account()->::Api::Account::MergeFrom(from.account());
  }
  if (from.has_peer()) {
    mutable_peer()->::Api::Peer::MergeFrom(from.peer());
  }
  if (from.receivepubkey().size() > 0) {

    receivepubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.receivepubkey_);
  }
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {

  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transaction::InternalSwap(Transaction* other) {
  txsignatures_.UnsafeArenaSwap(&other->txsignatures_);
  type_.Swap(&other->type_);
  senderpubkey_.Swap(&other->senderpubkey_);
  hash_.Swap(&other->hash_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(asset_, other->asset_);
  std::swap(simpleasset_, other->simpleasset_);
  std::swap(domain_, other->domain_);
  std::swap(account_, other->account_);
  std::swap(peer_, other->peer_);
  receivepubkey_.Swap(&other->receivepubkey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transaction

// repeated .Api.TxSignatures txSignatures = 1;
int Transaction::txsignatures_size() const {
  return txsignatures_.size();
}
void Transaction::clear_txsignatures() {
  txsignatures_.Clear();
}
const ::Api::TxSignatures& Transaction::txsignatures(int index) const {
  // @@protoc_insertion_point(field_get:Api.Transaction.txSignatures)
  return txsignatures_.Get(index);
}
::Api::TxSignatures* Transaction::mutable_txsignatures(int index) {
  // @@protoc_insertion_point(field_mutable:Api.Transaction.txSignatures)
  return txsignatures_.Mutable(index);
}
::Api::TxSignatures* Transaction::add_txsignatures() {
  // @@protoc_insertion_point(field_add:Api.Transaction.txSignatures)
  return txsignatures_.Add();
}
::google::protobuf::RepeatedPtrField< ::Api::TxSignatures >*
Transaction::mutable_txsignatures() {
  // @@protoc_insertion_point(field_mutable_list:Api.Transaction.txSignatures)
  return &txsignatures_;
}
const ::google::protobuf::RepeatedPtrField< ::Api::TxSignatures >&
Transaction::txsignatures() const {
  // @@protoc_insertion_point(field_list:Api.Transaction.txSignatures)
  return txsignatures_;
}

// optional string type = 2;
void Transaction::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::type() const {
  // @@protoc_insertion_point(field_get:Api.Transaction.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Transaction.type)
}
 void Transaction::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Transaction.type)
}
 void Transaction::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Transaction.type)
}
 ::std::string* Transaction::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:Api.Transaction.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_type() {
  // @@protoc_insertion_point(field_release:Api.Transaction.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Api.Transaction.type)
}

// optional string senderPubkey = 3;
void Transaction::clear_senderpubkey() {
  senderpubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::senderpubkey() const {
  // @@protoc_insertion_point(field_get:Api.Transaction.senderPubkey)
  return senderpubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_senderpubkey(const ::std::string& value) {
  
  senderpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Transaction.senderPubkey)
}
 void Transaction::set_senderpubkey(const char* value) {
  
  senderpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Transaction.senderPubkey)
}
 void Transaction::set_senderpubkey(const char* value, size_t size) {
  
  senderpubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Transaction.senderPubkey)
}
 ::std::string* Transaction::mutable_senderpubkey() {
  
  // @@protoc_insertion_point(field_mutable:Api.Transaction.senderPubkey)
  return senderpubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_senderpubkey() {
  // @@protoc_insertion_point(field_release:Api.Transaction.senderPubkey)
  
  return senderpubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_senderpubkey(::std::string* senderpubkey) {
  if (senderpubkey != NULL) {
    
  } else {
    
  }
  senderpubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), senderpubkey);
  // @@protoc_insertion_point(field_set_allocated:Api.Transaction.senderPubkey)
}

// optional string hash = 4;
void Transaction::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::hash() const {
  // @@protoc_insertion_point(field_get:Api.Transaction.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Transaction.hash)
}
 void Transaction::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Transaction.hash)
}
 void Transaction::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Transaction.hash)
}
 ::std::string* Transaction::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:Api.Transaction.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_hash() {
  // @@protoc_insertion_point(field_release:Api.Transaction.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:Api.Transaction.hash)
}

// optional uint64 timestamp = 5;
void Transaction::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Transaction::timestamp() const {
  // @@protoc_insertion_point(field_get:Api.Transaction.timestamp)
  return timestamp_;
}
 void Transaction::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Api.Transaction.timestamp)
}

// optional .Api.Asset asset = 6;
bool Transaction::has_asset() const {
  return !_is_default_instance_ && asset_ != NULL;
}
void Transaction::clear_asset() {
  if (GetArenaNoVirtual() == NULL && asset_ != NULL) delete asset_;
  asset_ = NULL;
}
const ::Api::Asset& Transaction::asset() const {
  // @@protoc_insertion_point(field_get:Api.Transaction.asset)
  return asset_ != NULL ? *asset_ : *default_instance_->asset_;
}
::Api::Asset* Transaction::mutable_asset() {
  
  if (asset_ == NULL) {
    asset_ = new ::Api::Asset;
  }
  // @@protoc_insertion_point(field_mutable:Api.Transaction.asset)
  return asset_;
}
::Api::Asset* Transaction::release_asset() {
  // @@protoc_insertion_point(field_release:Api.Transaction.asset)
  
  ::Api::Asset* temp = asset_;
  asset_ = NULL;
  return temp;
}
void Transaction::set_allocated_asset(::Api::Asset* asset) {
  delete asset_;
  asset_ = asset;
  if (asset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.Transaction.asset)
}

// optional .Api.SimpleAsset simpleAsset = 7;
bool Transaction::has_simpleasset() const {
  return !_is_default_instance_ && simpleasset_ != NULL;
}
void Transaction::clear_simpleasset() {
  if (GetArenaNoVirtual() == NULL && simpleasset_ != NULL) delete simpleasset_;
  simpleasset_ = NULL;
}
const ::Api::SimpleAsset& Transaction::simpleasset() const {
  // @@protoc_insertion_point(field_get:Api.Transaction.simpleAsset)
  return simpleasset_ != NULL ? *simpleasset_ : *default_instance_->simpleasset_;
}
::Api::SimpleAsset* Transaction::mutable_simpleasset() {
  
  if (simpleasset_ == NULL) {
    simpleasset_ = new ::Api::SimpleAsset;
  }
  // @@protoc_insertion_point(field_mutable:Api.Transaction.simpleAsset)
  return simpleasset_;
}
::Api::SimpleAsset* Transaction::release_simpleasset() {
  // @@protoc_insertion_point(field_release:Api.Transaction.simpleAsset)
  
  ::Api::SimpleAsset* temp = simpleasset_;
  simpleasset_ = NULL;
  return temp;
}
void Transaction::set_allocated_simpleasset(::Api::SimpleAsset* simpleasset) {
  delete simpleasset_;
  simpleasset_ = simpleasset;
  if (simpleasset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.Transaction.simpleAsset)
}

// optional .Api.Domain domain = 8;
bool Transaction::has_domain() const {
  return !_is_default_instance_ && domain_ != NULL;
}
void Transaction::clear_domain() {
  if (GetArenaNoVirtual() == NULL && domain_ != NULL) delete domain_;
  domain_ = NULL;
}
const ::Api::Domain& Transaction::domain() const {
  // @@protoc_insertion_point(field_get:Api.Transaction.domain)
  return domain_ != NULL ? *domain_ : *default_instance_->domain_;
}
::Api::Domain* Transaction::mutable_domain() {
  
  if (domain_ == NULL) {
    domain_ = new ::Api::Domain;
  }
  // @@protoc_insertion_point(field_mutable:Api.Transaction.domain)
  return domain_;
}
::Api::Domain* Transaction::release_domain() {
  // @@protoc_insertion_point(field_release:Api.Transaction.domain)
  
  ::Api::Domain* temp = domain_;
  domain_ = NULL;
  return temp;
}
void Transaction::set_allocated_domain(::Api::Domain* domain) {
  delete domain_;
  domain_ = domain;
  if (domain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.Transaction.domain)
}

// optional .Api.Account account = 9;
bool Transaction::has_account() const {
  return !_is_default_instance_ && account_ != NULL;
}
void Transaction::clear_account() {
  if (GetArenaNoVirtual() == NULL && account_ != NULL) delete account_;
  account_ = NULL;
}
const ::Api::Account& Transaction::account() const {
  // @@protoc_insertion_point(field_get:Api.Transaction.account)
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
::Api::Account* Transaction::mutable_account() {
  
  if (account_ == NULL) {
    account_ = new ::Api::Account;
  }
  // @@protoc_insertion_point(field_mutable:Api.Transaction.account)
  return account_;
}
::Api::Account* Transaction::release_account() {
  // @@protoc_insertion_point(field_release:Api.Transaction.account)
  
  ::Api::Account* temp = account_;
  account_ = NULL;
  return temp;
}
void Transaction::set_allocated_account(::Api::Account* account) {
  delete account_;
  account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.Transaction.account)
}

// optional .Api.Peer peer = 10;
bool Transaction::has_peer() const {
  return !_is_default_instance_ && peer_ != NULL;
}
void Transaction::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::Api::Peer& Transaction::peer() const {
  // @@protoc_insertion_point(field_get:Api.Transaction.peer)
  return peer_ != NULL ? *peer_ : *default_instance_->peer_;
}
::Api::Peer* Transaction::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::Api::Peer;
  }
  // @@protoc_insertion_point(field_mutable:Api.Transaction.peer)
  return peer_;
}
::Api::Peer* Transaction::release_peer() {
  // @@protoc_insertion_point(field_release:Api.Transaction.peer)
  
  ::Api::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void Transaction::set_allocated_peer(::Api::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.Transaction.peer)
}

// optional string receivePubkey = 11;
void Transaction::clear_receivepubkey() {
  receivepubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Transaction::receivepubkey() const {
  // @@protoc_insertion_point(field_get:Api.Transaction.receivePubkey)
  return receivepubkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_receivepubkey(const ::std::string& value) {
  
  receivepubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.Transaction.receivePubkey)
}
 void Transaction::set_receivepubkey(const char* value) {
  
  receivepubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.Transaction.receivePubkey)
}
 void Transaction::set_receivepubkey(const char* value, size_t size) {
  
  receivepubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.Transaction.receivePubkey)
}
 ::std::string* Transaction::mutable_receivepubkey() {
  
  // @@protoc_insertion_point(field_mutable:Api.Transaction.receivePubkey)
  return receivepubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Transaction::release_receivepubkey() {
  // @@protoc_insertion_point(field_release:Api.Transaction.receivePubkey)
  
  return receivepubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Transaction::set_allocated_receivepubkey(::std::string* receivepubkey) {
  if (receivepubkey != NULL) {
    
  } else {
    
  }
  receivepubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), receivepubkey);
  // @@protoc_insertion_point(field_set_allocated:Api.Transaction.receivePubkey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConsensusEvent::kEventSignaturesFieldNumber;
const int ConsensusEvent::kTransactionFieldNumber;
const int ConsensusEvent::kOrderFieldNumber;
const int ConsensusEvent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConsensusEvent::ConsensusEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Api.ConsensusEvent)
}

void ConsensusEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  transaction_ = const_cast< ::Api::Transaction*>(&::Api::Transaction::default_instance());
}

ConsensusEvent::ConsensusEvent(const ConsensusEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Api.ConsensusEvent)
}

void ConsensusEvent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  transaction_ = NULL;
  order_ = GOOGLE_ULONGLONG(0);
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConsensusEvent::~ConsensusEvent() {
  // @@protoc_insertion_point(destructor:Api.ConsensusEvent)
  SharedDtor();
}

void ConsensusEvent::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete transaction_;
  }
}

void ConsensusEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsensusEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsensusEvent_descriptor_;
}

const ConsensusEvent& ConsensusEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
  return *default_instance_;
}

ConsensusEvent* ConsensusEvent::default_instance_ = NULL;

ConsensusEvent* ConsensusEvent::New(::google::protobuf::Arena* arena) const {
  ConsensusEvent* n = new ConsensusEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConsensusEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Api.ConsensusEvent)
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) delete transaction_;
  transaction_ = NULL;
  order_ = GOOGLE_ULONGLONG(0);
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eventsignatures_.Clear();
}

bool ConsensusEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Api.ConsensusEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Api.EventSignature eventSignatures = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_eventSignatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_eventsignatures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_eventSignatures;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_transaction;
        break;
      }

      // optional .Api.Transaction transaction = 2;
      case 2: {
        if (tag == 18) {
         parse_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional uint64 order = 3;
      case 3: {
        if (tag == 24) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status;
        break;
      }

      // optional string status = 4;
      case 4: {
        if (tag == 34) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Api.ConsensusEvent.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Api.ConsensusEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Api.ConsensusEvent)
  return false;
#undef DO_
}

void ConsensusEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Api.ConsensusEvent)
  // repeated .Api.EventSignature eventSignatures = 1;
  for (unsigned int i = 0, n = this->eventsignatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eventsignatures(i), output);
  }

  // optional .Api.Transaction transaction = 2;
  if (this->has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->transaction_, output);
  }

  // optional uint64 order = 3;
  if (this->order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->order(), output);
  }

  // optional string status = 4;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.ConsensusEvent.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:Api.ConsensusEvent)
}

::google::protobuf::uint8* ConsensusEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Api.ConsensusEvent)
  // repeated .Api.EventSignature eventSignatures = 1;
  for (unsigned int i = 0, n = this->eventsignatures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->eventsignatures(i), false, target);
  }

  // optional .Api.Transaction transaction = 2;
  if (this->has_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->transaction_, false, target);
  }

  // optional uint64 order = 3;
  if (this->order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->order(), target);
  }

  // optional string status = 4;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Api.ConsensusEvent.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Api.ConsensusEvent)
  return target;
}

int ConsensusEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Api.ConsensusEvent)
  int total_size = 0;

  // optional .Api.Transaction transaction = 2;
  if (this->has_transaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transaction_);
  }

  // optional uint64 order = 3;
  if (this->order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->order());
  }

  // optional string status = 4;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // repeated .Api.EventSignature eventSignatures = 1;
  total_size += 1 * this->eventsignatures_size();
  for (int i = 0; i < this->eventsignatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventsignatures(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsensusEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Api.ConsensusEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConsensusEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConsensusEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Api.ConsensusEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Api.ConsensusEvent)
    MergeFrom(*source);
  }
}

void ConsensusEvent::MergeFrom(const ConsensusEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Api.ConsensusEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  eventsignatures_.MergeFrom(from.eventsignatures_);
  if (from.has_transaction()) {
    mutable_transaction()->::Api::Transaction::MergeFrom(from.transaction());
  }
  if (from.order() != 0) {
    set_order(from.order());
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void ConsensusEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Api.ConsensusEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusEvent::CopyFrom(const ConsensusEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Api.ConsensusEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusEvent::IsInitialized() const {

  return true;
}

void ConsensusEvent::Swap(ConsensusEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConsensusEvent::InternalSwap(ConsensusEvent* other) {
  eventsignatures_.UnsafeArenaSwap(&other->eventsignatures_);
  std::swap(transaction_, other->transaction_);
  std::swap(order_, other->order_);
  status_.Swap(&other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConsensusEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsensusEvent_descriptor_;
  metadata.reflection = ConsensusEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConsensusEvent

// repeated .Api.EventSignature eventSignatures = 1;
int ConsensusEvent::eventsignatures_size() const {
  return eventsignatures_.size();
}
void ConsensusEvent::clear_eventsignatures() {
  eventsignatures_.Clear();
}
const ::Api::EventSignature& ConsensusEvent::eventsignatures(int index) const {
  // @@protoc_insertion_point(field_get:Api.ConsensusEvent.eventSignatures)
  return eventsignatures_.Get(index);
}
::Api::EventSignature* ConsensusEvent::mutable_eventsignatures(int index) {
  // @@protoc_insertion_point(field_mutable:Api.ConsensusEvent.eventSignatures)
  return eventsignatures_.Mutable(index);
}
::Api::EventSignature* ConsensusEvent::add_eventsignatures() {
  // @@protoc_insertion_point(field_add:Api.ConsensusEvent.eventSignatures)
  return eventsignatures_.Add();
}
::google::protobuf::RepeatedPtrField< ::Api::EventSignature >*
ConsensusEvent::mutable_eventsignatures() {
  // @@protoc_insertion_point(field_mutable_list:Api.ConsensusEvent.eventSignatures)
  return &eventsignatures_;
}
const ::google::protobuf::RepeatedPtrField< ::Api::EventSignature >&
ConsensusEvent::eventsignatures() const {
  // @@protoc_insertion_point(field_list:Api.ConsensusEvent.eventSignatures)
  return eventsignatures_;
}

// optional .Api.Transaction transaction = 2;
bool ConsensusEvent::has_transaction() const {
  return !_is_default_instance_ && transaction_ != NULL;
}
void ConsensusEvent::clear_transaction() {
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) delete transaction_;
  transaction_ = NULL;
}
const ::Api::Transaction& ConsensusEvent::transaction() const {
  // @@protoc_insertion_point(field_get:Api.ConsensusEvent.transaction)
  return transaction_ != NULL ? *transaction_ : *default_instance_->transaction_;
}
::Api::Transaction* ConsensusEvent::mutable_transaction() {
  
  if (transaction_ == NULL) {
    transaction_ = new ::Api::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:Api.ConsensusEvent.transaction)
  return transaction_;
}
::Api::Transaction* ConsensusEvent::release_transaction() {
  // @@protoc_insertion_point(field_release:Api.ConsensusEvent.transaction)
  
  ::Api::Transaction* temp = transaction_;
  transaction_ = NULL;
  return temp;
}
void ConsensusEvent::set_allocated_transaction(::Api::Transaction* transaction) {
  delete transaction_;
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Api.ConsensusEvent.transaction)
}

// optional uint64 order = 3;
void ConsensusEvent::clear_order() {
  order_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ConsensusEvent::order() const {
  // @@protoc_insertion_point(field_get:Api.ConsensusEvent.order)
  return order_;
}
 void ConsensusEvent::set_order(::google::protobuf::uint64 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:Api.ConsensusEvent.order)
}

// optional string status = 4;
void ConsensusEvent::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConsensusEvent::status() const {
  // @@protoc_insertion_point(field_get:Api.ConsensusEvent.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConsensusEvent::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Api.ConsensusEvent.status)
}
 void ConsensusEvent::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Api.ConsensusEvent.status)
}
 void ConsensusEvent::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Api.ConsensusEvent.status)
}
 ::std::string* ConsensusEvent::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:Api.ConsensusEvent.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConsensusEvent::release_status() {
  // @@protoc_insertion_point(field_release:Api.ConsensusEvent.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConsensusEvent::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:Api.ConsensusEvent.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Api

// @@protoc_insertion_point(global_scope)
